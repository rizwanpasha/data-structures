/**
 *
 * @author Rizwan Pasha
 */
public class LinkedListDemo {

    public static void main(String args[]) {
        LinkedList ll = new LinkedList();
        ll.append(10);
        ll.append(20);
        ll.display();
        ll.prepend(30);
        ll.display();
        ll.prepend(40);
        ll.display();
        ll.delete();
        ll.display();
    }
}


 // each node contains data and reference to next node
class Node {

    int data;
    Node next;

    Node(int data) {
        this.data = data;
    }
}

class LinkedList {

    Node head;


    // adds new node at the end of the list
    public void append(int data) {
        if (head == null) {
            head = new Node(data);
            return;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = new Node(data);
    }


    // adds new element at the begining of the list
    public void prepend(int data) {
        Node newHead = new Node(data);
        newHead.next = head;
        head = newHead;
    }

    // delete the node based on value
    public void delete(int data) {
        if (head == null) {
            System.out.println("List empty");
            return;
        }
        if (head.data == data) {

            head = head.next;

        } else {
            Node current = head;
            while (current.next.data == data) {
                current.next = current.next.next;
                return;
            }
            current = current.next;
        }
    }

    // delete the head node
    public void delete() {
        if (head == null) {
            System.out.println("List empty.");
            return;
        } else if (head.next == null) {
            head = null;
        } else {
            Node newHead = head.next;
            head = newHead;
        }
    }

    // returns the size of the list
    public int size() {
        int size = 0;
        if (head == null) {
            return size;
        }
        Node current = head;
        size++;
        while (current.next != null) {
            size++;
            current = current.next;
        }
        return size;
    }


    // prints all the elements from the list
    public void display() {
        if (head == null) {
            System.out.println("List empty.");
            return;
        } else {
            Node current = head;
            while (current.next != null) {
                System.out.print(current.data + " ");
                current = current.next;
            }
            System.out.println(current.data + " ");

        }
    }
}
